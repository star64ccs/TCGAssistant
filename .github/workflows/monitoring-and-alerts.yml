name: Monitoring and Alerts

on:
  schedule:
    # 每5分鐘檢查一次應用程序健康狀態
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - health
        - performance
        - security
        - uptime

jobs:
  # 應用程序健康檢查
  health-check:
    name: Application Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Check frontend health
      run: |
        echo "Checking frontend health"
        # 檢查前端應用程序狀態
        curl -f https://tcg-assistant.vercel.app/ || echo "Frontend health check failed"
        
    - name: Check backend health
      run: |
        echo "Checking backend health"
        # 檢查後端API狀態
        curl -f https://api.tcg-assistant.com/health || echo "Backend health check failed"
        
    - name: Check database connectivity
      run: |
        echo "Checking database connectivity"
        # 檢查數據庫連接狀態
        
    - name: Check external services
      run: |
        echo "Checking external services"
        # 檢查第三方服務狀態（如支付、通知等）
        
    - name: Generate health report
      run: |
        echo "Generating health report"
        # 生成健康狀態報告

  # 性能監控
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: health-check
    
    steps:
    - name: Check frontend performance
      run: |
        echo "Checking frontend performance"
        # 使用 Lighthouse CI 檢查前端性能
        # npx lighthouse https://tcg-assistant.vercel.app/ --output=json --output-path=./lighthouse-report.json
        
    - name: Check API response times
      run: |
        echo "Checking API response times"
        # 檢查API響應時間
        start_time=$(date +%s.%N)
        curl -s https://api.tcg-assistant.com/health > /dev/null
        end_time=$(date +%s.%N)
        response_time=$(echo "$end_time - $start_time" | bc)
        echo "API response time: ${response_time}s"
        
        # 如果響應時間超過閾值，觸發警報
        if (( $(echo "$response_time > 2.0" | bc -l) )); then
          echo "WARNING: API response time is slow: ${response_time}s"
          exit 1
        fi
        
    - name: Check memory usage
      run: |
        echo "Checking memory usage"
        # 檢查應用程序內存使用情況
        
    - name: Check CPU usage
      run: |
        echo "Checking CPU usage"
        # 檢查CPU使用情況
        
    - name: Check disk space
      run: |
        echo "Checking disk space"
        # 檢查磁盤空間使用情況
        
    - name: Generate performance report
      run: |
        echo "Generating performance report"
        # 生成性能監控報告

  # 安全監控
  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: performance-monitoring
    
    steps:
    - name: Check for security vulnerabilities
      run: |
        echo "Checking for security vulnerabilities"
        # 檢查依賴項安全漏洞
        npm audit --audit-level=moderate || echo "Security vulnerabilities found"
        
    - name: Check SSL certificate
      run: |
        echo "Checking SSL certificate"
        # 檢查SSL證書有效期
        openssl s_client -connect tcg-assistant.vercel.app:443 -servername tcg-assistant.vercel.app < /dev/null 2>/dev/null | openssl x509 -noout -dates
        
    - name: Check for suspicious activities
      run: |
        echo "Checking for suspicious activities"
        # 檢查可疑活動（如異常登錄、大量請求等）
        
    - name: Check firewall status
      run: |
        echo "Checking firewall status"
        # 檢查防火牆狀態
        
    - name: Generate security report
      run: |
        echo "Generating security report"
        # 生成安全監控報告

  # 可用性監控
  uptime-monitoring:
    name: Uptime Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: security-monitoring
    
    steps:
    - name: Check frontend uptime
      run: |
        echo "Checking frontend uptime"
        response=$(curl -s -o /dev/null -w "%{http_code}" https://tcg-assistant.vercel.app/)
        if [ "$response" != "200" ]; then
          echo "ERROR: Frontend is down (HTTP $response)"
          exit 1
        fi
        echo "Frontend is up and running"
        
    - name: Check backend uptime
      run: |
        echo "Checking backend uptime"
        response=$(curl -s -o /dev/null -w "%{http_code}" https://api.tcg-assistant.com/health)
        if [ "$response" != "200" ]; then
          echo "ERROR: Backend is down (HTTP $response)"
          exit 1
        fi
        echo "Backend is up and running"
        
    - name: Check mobile app status
      run: |
        echo "Checking mobile app status"
        # 檢查移動應用在應用商店的狀態
        
    - name: Calculate uptime percentage
      run: |
        echo "Calculating uptime percentage"
        # 計算應用程序可用性百分比

  # 錯誤監控
  error-monitoring:
    name: Error Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: uptime-monitoring
    
    steps:
    - name: Check error logs
      run: |
        echo "Checking error logs"
        # 檢查應用程序錯誤日誌
        
    - name: Check crash reports
      run: |
        echo "Checking crash reports"
        # 檢查崩潰報告
        
    - name: Check failed transactions
      run: |
        echo "Checking failed transactions"
        # 檢查失敗的交易
        
    - name: Check API errors
      run: |
        echo "Checking API errors"
        # 檢查API錯誤率
        
    - name: Generate error report
      run: |
        echo "Generating error report"
        # 生成錯誤監控報告

  # 自動警報
  alerts:
    name: Automated Alerts
    runs-on: ubuntu-latest
    needs: [health-check, performance-monitoring, security-monitoring, uptime-monitoring, error-monitoring]
    timeout-minutes: 10
    if: always()
    
    steps:
    - name: Check for critical issues
      run: |
        echo "Checking for critical issues"
        # 檢查是否有嚴重問題需要立即通知
        
    - name: Send Slack notification
      if: failure()
      run: |
        echo "Sending Slack notification for failure"
        # 發送 Slack 通知
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"🚨 TCG Assistant monitoring alert: One or more checks failed"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Send email alert
      if: failure()
      run: |
        echo "Sending email alert for failure"
        # 發送郵件警報
        
    - name: Create GitHub issue
      if: failure()
      run: |
        echo "Creating GitHub issue for failure"
        # 創建 GitHub issue 記錄問題
        
    - name: Update status page
      run: |
        echo "Updating status page"
        # 更新狀態頁面
        
    - name: Generate monitoring report
      run: |
        echo "Generating comprehensive monitoring report"
        # 生成完整的監控報告
        
    - name: Upload monitoring artifacts
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-report
        path: monitoring-results/
        retention-days: 7

  # 定期維護
  maintenance:
    name: Scheduled Maintenance
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event.schedule == '0 2 * * 0'  # 每週日凌晨2點
    
    steps:
    - name: Database cleanup
      run: |
        echo "Running database cleanup"
        # 清理過期的日誌和臨時數據
        
    - name: Cache cleanup
      run: |
        echo "Running cache cleanup"
        # 清理過期的緩存
        
    - name: Log rotation
      run: |
        echo "Running log rotation"
        # 輪換日誌文件
        
    - name: Backup creation
      run: |
        echo "Creating backup"
        # 創建數據備份
        
    - name: Dependency updates
      run: |
        echo "Checking for dependency updates"
        # 檢查依賴項更新
        
    - name: Performance optimization
      run: |
        echo "Running performance optimization"
        # 運行性能優化
        
    - name: Generate maintenance report
      run: |
        echo "Generating maintenance report"
        # 生成維護報告
